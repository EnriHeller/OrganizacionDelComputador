     1                                  ;Realizar un programa que resuelva X Y teniendo en cuenta que tanto X e Y pueden
     2                                  ;ser positivos o negativos.
     3                                  bits 64
     4                                  global main
     5                                  extern puts
     6                                  extern gets
     7                                  extern sscanf
     8                                  extern printf
     9                                  
    10                                  %macro mPuts 1
    11                                      mov rdi, %1
    12                                      sub rsp, 8
    13                                      call puts
    14                                      add rsp, 8
    15                                  %endmacro
    16                                  
    17                                  %macro mGets 1
    18                                      mov rdi, %1
    19                                      sub rsp, 8
    20                                      call gets
    21                                      add rsp, 8
    22                                  %endmacro
    23                                  
    24                                  %macro mScanNum 2
    25                                      mov rdi, %1
    26                                      mov rsi, numFormat
    27                                      mov rcx, %2
    28                                  
    29                                      sub rsp, 8
    30                                      call sscanf
    31                                      add rsp, 8
    32                                  %endmacro
    33                                  
    34                                  %macro mPrintf 0
    35                                      sub rsp, 8
    36                                      call printf
    37                                      add rsp, 8
    38                                  %endmacro
    39                                  
    40                                  section .data
    41 00000000 496E67726573652058-         mensajeX db "Ingrese X", 0
    41 00000009 00                 
    42 0000000A 496E67726573652059-         mensajeY db "Ingrese Y", 0
    42 00000013 00                 
    43                                  
    44 00000014 256C6900                    numFormat   db "%li",0
    45 00000018 526573756C7461646F-         resFormat   db "Resultado: %li",0
    45 00000021 3A20256C6900       
    46                                  
    47                                  section .bss
    48 00000000 <res 14h>                   Xs resb 20
    49 00000014 <res 14h>                   Ys resb 20
    50                                  
    51 00000028 ????????????????            Xn resq 1
    52 00000030 ????????????????            Yn resq 1
    53                                  
    54 00000038 ????????????????            res resq 1
    55                                  
    56                                  
    57                                  section .text
    58                                  
    59                                  main:
    60                                      mPuts mensajeX
    11 00000000 48BF-               <1>  mov rdi, %1
    11 00000002 [0000000000000000]  <1>
    12 0000000A 4883EC08            <1>  sub rsp, 8
    13 0000000E E8(00000000)        <1>  call puts
    14 00000013 4883C408            <1>  add rsp, 8
    61                                      mGets Xs
    18 00000017 48BF-               <1>  mov rdi, %1
    18 00000019 [0000000000000000]  <1>
    19 00000021 4883EC08            <1>  sub rsp, 8
    20 00000025 E8(00000000)        <1>  call gets
    21 0000002A 4883C408            <1>  add rsp, 8
    62                                  
    63                                      escanearX:
    64                                      mScanNum Xs, Xn
    25 0000002E 48BF-               <1>  mov rdi, %1
    25 00000030 [0000000000000000]  <1>
    26 00000038 48BE-               <1>  mov rsi, numFormat
    26 0000003A [1400000000000000]  <1>
    27 00000042 48B9-               <1>  mov rcx, %2
    27 00000044 [2800000000000000]  <1>
    28                              <1> 
    29 0000004C 4883EC08            <1>  sub rsp, 8
    30 00000050 E8(00000000)        <1>  call sscanf
    31 00000055 4883C408            <1>  add rsp, 8
    65                                  
    66                                      mPuts mensajeY
    11 00000059 48BF-               <1>  mov rdi, %1
    11 0000005B [0A00000000000000]  <1>
    12 00000063 4883EC08            <1>  sub rsp, 8
    13 00000067 E8(00000000)        <1>  call puts
    14 0000006C 4883C408            <1>  add rsp, 8
    67                                      mGets Ys
    18 00000070 48BF-               <1>  mov rdi, %1
    18 00000072 [1400000000000000]  <1>
    19 0000007A 4883EC08            <1>  sub rsp, 8
    20 0000007E E8(00000000)        <1>  call gets
    21 00000083 4883C408            <1>  add rsp, 8
    68                                      
    69                                      escanearY:
    70                                      mScanNum Ys, Yn
    25 00000087 48BF-               <1>  mov rdi, %1
    25 00000089 [1400000000000000]  <1>
    26 00000091 48BE-               <1>  mov rsi, numFormat
    26 00000093 [1400000000000000]  <1>
    27 0000009B 48B9-               <1>  mov rcx, %2
    27 0000009D [3000000000000000]  <1>
    28                              <1> 
    29 000000A5 4883EC08            <1>  sub rsp, 8
    30 000000A9 E8(00000000)        <1>  call sscanf
    31 000000AE 4883C408            <1>  add rsp, 8
    71                                  
    72 000000B2 66B90200                    mov cx, 2   
    73 000000B6 488B0425[28000000]          mov rax, qword [Xn]
    74 000000BE 48890425[38000000]          mov qword [res], rax
    75                                  
    76 000000C6 668B0C25[30000000]          mov cx, [Yn]  ; Cantidad de veces que se desea repetir la instrucci√≥n
    77                                  
    78                                  
    79                                  multSucesiva:
    80 000000CE 480FAF0425-                 imul rax, qword [Xn]
    80 000000D3 [28000000]         
    81 000000D7 48890425[38000000]          mov qword [res], rax
    82 000000DF E2ED                        loop multSucesiva  ; Decrementa ecx y salta a 'repetir' si ecx no es cero
    83                                  
    84                                  impresion:
    85 000000E1 48BF-                       mov rdi, resFormat
    85 000000E3 [1800000000000000] 
    86 000000EB 488B3425[38000000]          mov rsi, qword[res]
    87                                  
    88                                      mPrintf
    35 000000F3 4883EC08            <1>  sub rsp, 8
    36 000000F7 E8(00000000)        <1>  call printf
    37 000000FC 4883C408            <1>  add rsp, 8
    89                                  
    90 00000100 C3                          ret
